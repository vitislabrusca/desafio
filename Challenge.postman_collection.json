{
	"info": {
		"_postman_id": "b3bbb6fe-beb5-4729-945b-80ab2f0fa458",
		"name": "Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16016515"
	},
	"item": [
		{
			"name": "CRUD Users",
			"item": [
				{
					"name": "get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check json response\", function(){\r",
									"    pm.response.to.have.jsonBody();\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const userNameDefined = (user) => {\r",
									"    return user.username !== undefined;\r",
									"}\r",
									"pm.test(\"All usernames are defined\", function() {\r",
									"    const users = pm.response.json();\r",
									"    \r",
									"    pm.expect(users.every(userNameDefined)).to.be.true;\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"username\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"address\": {",
									"            \"type\": \"object\"",
									"        },",
									"        \"phone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"website\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"company\": {",
									"            \"type\": \"object\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"name\",",
									"        \"username\",",
									"        \"email\",",
									"        \"address\",",
									"        \"phone\"",
									"    ]",
									"};",
									"",
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Schema is valid\", function(){",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.have.jsonSchema(schema)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newUserId = pm.response.json().id;",
									"",
									"pm.collectionVariables.set(\"idNewUser\", newUserId);",
									"",
									"pm.test(\"Check status code 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check Id format\", function () {",
									"    pm.expect(newUserId).to.be.a('number');",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET check new user is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const createdUserIdSaved = pm.collectionVariables.get(\"idNewUser\");",
									"const createdUserIdReturned = pm.response.json().id;",
									"",
									"pm.test(\"Created user id check\", function () {",
									"    pm.expect(createdUserIdReturned).to.be.eql(createdUserIdSaved);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{idNewUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{idNewUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE delete user created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{idNewUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{idNewUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET check deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status code 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/users/{{idNewUser}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{idNewUser}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD Posts",
			"item": [
				{
					"name": "GET posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check json response\", function(){",
									"    pm.response.to.have.jsonBody();",
									"})",
									"",
									"",
									"const titleDefined = (post) => {",
									"    return post.title !== undefined;",
									"}",
									"pm.test(\"Posts titles defined\", function() {",
									"    const posts = pm.response.json();",
									"    pm.expect(posts.every(titleDefined)).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET posts user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const userIdCheck = (postsUserOne) => {",
									"    return postsUserOne.userId === 1;",
									"}",
									"",
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Check json response\", function(){",
									"    pm.response.to.have.jsonBody();",
									"})",
									"",
									"pm.test(\"Check userIdÂ´s posts\", function() {",
									"    const postsUserOne = pm.response.json();",
									"    pm.expect(postsUserOne.every(userIdCheck)).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/users/1/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"title\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"body\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userId\": {",
									"            \"type\": \"number\"",
									"        },",
									"        \"id\": {",
									"            \"type\": \"number\"",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"id\",",
									"        \"userId\",",
									"        \"title\"",
									"    ]",
									"};",
									"",
									"",
									"pm.test(\"Check status code 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Check json response\", function(){",
									"    pm.response.to.have.jsonBody();",
									"})",
									"",
									"const newPost = pm.response.json().id;",
									"",
									"pm.environment.set(\"idNewPost\", newPost);",
									"",
									"pm.test(\"Check post id format\", function () {",
									"    pm.expect(newPost).to.be.a('number');",
									"});",
									"",
									"pm.test(\"Schema is valid\", function(){",
									"    pm.response.to.have.jsonBody();",
									"    pm.response.to.have.jsonSchema(schema)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"new post\",\n    \"body\": \"test post\",\n    \"userId\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET list new post created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const createdPostIdReturned = pm.response.json().id;",
									"",
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Created post id check\", function () {",
									"    pm.expect(createdPostIdReturned).to.be.eql(pm.environment.get(\"idNewPost\"))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/posts/{{idNewPost}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{idNewPost}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "GET coments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const postIdDefined = (comment) => {",
									"    return comment.postId !== undefined;",
									"}",
									"",
									"const idCommentDefined = (comment) => {",
									"    return comment.id !== undefined;",
									"}",
									"",
									"const emailDefined = (comment) => {",
									"    return comment.email !== undefined;",
									"}",
									"",
									"pm.test(\"Check status code 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ok message\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Check json response\", function(){",
									"    pm.response.to.have.jsonBody();",
									"})",
									"",
									"pm.test(\"All comments should have email, id, and postId defined\", function() {",
									"    const comments = pm.response.json();",
									"    pm.expect(comments.every(postIdDefined)).to.be.true;",
									"    pm.expect(comments.every(idCommentDefined)).to.be.true;",
									"    pm.expect(comments.every(emailDefined)).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/comments",
							"host": [
								"{{host}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET list comments post 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const postIsValid = (postData) => {",
									"    return postData.postId === 1;",
									"}",
									"",
									"",
									"pm.test(\"JSON Schema verification\", function(){",
									"    pm.response.to.have.jsonBody();",
									"})",
									"",
									"pm.test(\"Check postIdÂ´s comments\", function() {",
									"    const postData = pm.response.json();",
									"    pm.expect(postData.every(postIsValid)).to.be.true;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/posts/1/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"1",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "idNewUser",
			"value": ""
		},
		{
			"key": "idNewPost",
			"value": ""
		}
	]
}